"""Para resolver este desafÃ­o, debes escribir un algoritmo que elimine los elementos repetidos para obtener un conjunto Ãºnico llamado new_set.

Este algoritmo recibirÃ¡ como entrada cuatro conjuntos de paÃ­ses, estos paÃ­ses serÃ¡n de todo el continente americano divididos de la siguiente manera:

countries - PaÃ­ses del continente en general.
northAmerica - PaÃ­ses del norte de AmÃ©rica.
centralAmerica - PaÃ­ses del centro de AmÃ©rica.
southAmerica - PaÃ­ses del sur de AmÃ©rica.
En resumen, el algoritmo deberÃ¡ eliminar los elementos repetidos de los cuatro conjuntos de paÃ­ses y obtener un conjunto Ãºnico llamado new_set.


countries = {"MX", "COL", "ARG", "USA"}
northAm = {"USA", "CANADA"}
centralAm = {"MX", "GT", "BZ"}
southAm = {"COL", "BZ", "ARG"}


# Escribe tu soluciÃ³n ğŸ‘‡
new_set = set(countries | northAm | centralAm | southAm)
print(new_set)
"""


"""
Para resolver este desafÃ­o, tu reto es refactorizar el cÃ³digo base utilizando la caracterÃ­stica de "List Comprehension" de Python.

El cÃ³digo base incluye una lista llamada numbers que contiene nÃºmeros pares e impares. El algoritmo actual selecciona los nÃºmeros pares de esta lista y los agrega a una nueva lista llamada even_numbers.

Tu reto es crear la misma lista utilizando la caracterÃ­stica de "List Comprehension" de Python para crear la lista de nÃºmeros pares de manera mÃ¡s concisa y eficiente y el resultado deberÃ­a quedar en la variable even_numbers_v2. Las dos tÃ©cnicas deberÃ­an de dar el mismo resultado.
"""
numbers = [35, 16, 10, 34, 37, 25]

even_numbers = []
for number in numbers:
  if number % 2 == 0:
    even_numbers.append(number)
print('v1 =>', even_numbers)

# Ahora usando List Comprehension ğŸ‘‡
even_numbers_v2 = [number for number in numbers if number % 2 ==0]

print('v2 =>', even_numbers_v2)